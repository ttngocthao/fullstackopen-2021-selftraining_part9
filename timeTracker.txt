9.1 to 9.2 - 30mins
9.3 - 45 mins
9.4 to 9.5 - 45mins
9.6 to 9.7 - 1hour
======================
HOW TO SETUP: typescript express project
0. npm init
1. npm install typescript --save-dev
2. set npm script for running tsc: "tsc":"tsc"
3. initialize tsconfig.json by running: npm run tsc -- --init
4. install express and types needed: 
   npm install express
   npm install --save-dev eslint @types/express @typescript-eslint/eslint-plugin @typescript-eslint/parser
5. create .eslintrc file
6. install ts-node-dev (same purpose with nodemon):npm install --save-dev ts-node-dev
7. define run script in package.json
   "dev": "ts-node-dev index.ts",
   "lint": "eslint --ext .ts .",
8. add eslintignore file, ignore build and node_modules directory.
9. create a production build: npm run tsc
10. add script to run the project in production mode
   "start": "node build/index.js"
============================
9.8 to 9.9 - 2h
9.10 - 45mins
9.11 - 45mins
index - routers - services - data - types
9.12 - 30mins
9.13 - 45mins

======================
HOW TO SETUP: typescript react project
1. npx create-react-app . --template typescript
2. add lint
3. parse tsx file to lint script in package.json
   "lint": "eslint './src/**/*.{ts,tsx}'" 
   (If you are using Windows, you may need to use double quotes for the linting path: "lint": "eslint \"./src/**/*.{ts,tsx}\"".)

==========================
9.14 - 30mins
9.15 - 1hour

 For example if you define multiple interfaces with the same name, 
 they will result in a merged interface, 
 whereas if you try to define multiple types with the same name, 
 it will result in an error stating that a type with the same name is already declared.

9.16 to 9.17 - 1 hour
action creator functions: functions call action type and receive payload.
9.18 - 15mins